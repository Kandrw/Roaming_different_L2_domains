From 7a21af7cc99d4b050de0b033e38fe8d0a3f66bce Mon Sep 17 00:00:00 2001
From: Kandrw <doofydak@gmail.com>
Date: Sun, 18 May 2025 22:20:48 +0700
Subject: [PATCH] v1.0

---
 hostapd/Makefile                              |  8 ++
 hostapd/config_file.c                         | 16 ++++
 hostapd/ctrl_iface.c                          |  1 +
 hostapd/main.c                                |  3 +
 src/Makefile                                  |  2 +-
 src/ap/ap_config.h                            | 10 +++
 src/ap/ap_drv_ops.c                           |  2 +
 src/ap/beacon.c                               |  2 +
 src/ap/drv_callbacks.c                        | 32 ++++++--
 src/ap/ieee802_11.c                           | 14 +++-
 src/ap/wpa_auth.h                             |  4 +-
 src/ap/wpa_auth_ft.c                          | 80 +++++++++++++++----
 src/ap/wpa_auth_glue.c                        | 46 +++++++++--
 src/common/ieee802_11_common.c                |  3 +-
 src/drivers/driver_hostap.c                   |  3 +
 src/drivers/driver_nl80211.c                  |  9 ++-
 src/drivers/driver_nl80211_event.c            |  1 +
 .../different_l2_domains.c                    | 34 ++++++++
 .../different_l2_domains.h                    | 18 +++++
 src/utils/common.h                            |  2 +-
 src/utils/wpa_debug.c                         | 21 ++++-
 wpa_supplicant/events.c                       |  3 +
 22 files changed, 277 insertions(+), 37 deletions(-)
 create mode 100644 src/ft_over_ds_different_l2_domains/different_l2_domains.c
 create mode 100644 src/ft_over_ds_different_l2_domains/different_l2_domains.h

diff --git a/hostapd/Makefile b/hostapd/Makefile
index 93a11dd86..2ae01907c 100644
--- a/hostapd/Makefile
+++ b/hostapd/Makefile
@@ -288,6 +288,14 @@ NEED_ETH_P_OUI=y
 NEED_HMAC_SHA256_KDF=y
 endif
 
+ifdef CONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS
+
+CFLAGS += -DCONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS
+OBJS += ../src/ft_over_ds_different_l2_domains/different_l2_domains.o
+
+endif
+
+
 ifdef NEED_ETH_P_OUI
 CFLAGS += -DCONFIG_ETH_P_OUI
 OBJS += ../src/ap/eth_p_oui.o
diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 0e35730f9..29ba4744c 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -3109,6 +3109,22 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		bss->ft_over_ds = atoi(pos);
 	} else if (os_strcmp(buf, "ft_psk_generate_local") == 0) {
 		bss->ft_psk_generate_local = atoi(pos);
+#if CONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS
+	} else if (os_strcmp(buf, "ft_peer_list") == 0) {
+		// inet_pton(AF_INET, &(bss->ft_peer_list[0].sin_addr), pos, INET_ADDRSTRLEN);
+		inet_pton(AF_INET, pos, &(bss->ft_peer_list[0].sin_addr));
+		wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] ft_peer_list: %s - %u", __func__, __LINE__, pos, bss->ft_peer_list[0].sin_addr.s_addr);
+	} else if (os_strcmp(buf, "ft_peer_mac_list") == 0) {
+		wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] ft_peer_mac_list: %s", __func__, __LINE__, pos);
+
+		if (hwaddr_aton(pos, bss->ft_peer_list_mac)) {
+			wpa_printf(MSG_ERROR,
+				   "Line %d: invalid ft_peer_list_mac",
+				   line);
+			return 1;
+		}
+#endif
+
 #endif /* CONFIG_IEEE80211R_AP */
 #ifndef CONFIG_NO_CTRL_IFACE
 	} else if (os_strcmp(buf, "ctrl_interface") == 0) {
diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 2edce5ae3..ba1eb8356 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -1734,6 +1734,7 @@ static int hostapd_ctrl_iface_mgmt_rx_process(struct hostapd_data *hapd,
 	event.rx_mgmt.ssi_signal = ssi_signal;
 	event.rx_mgmt.datarate = datarate;
 	hapd->ext_mgmt_frame_handling = 0;
+	wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] wpa_supplicant_event EVENT_RX_MGMT1", __func__, __LINE__);
 	wpa_supplicant_event(hapd, EVENT_RX_MGMT, &event);
 	hapd->ext_mgmt_frame_handling = 1;
 
diff --git a/hostapd/main.c b/hostapd/main.c
index f8d417fa2..6080fbd30 100644
--- a/hostapd/main.c
+++ b/hostapd/main.c
@@ -828,6 +828,7 @@ int main(int argc, char *argv[])
 
 	if (os_program_init())
 		return -1;
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
 
 	os_memset(&interfaces, 0, sizeof(interfaces));
 	interfaces.reload_config = hostapd_reload_config;
@@ -944,6 +945,7 @@ int main(int argc, char *argv[])
 	if (optind == argc && interfaces.global_iface_path == NULL &&
 	    num_bss_configs == 0)
 		usage();
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
 
 	wpa_msg_register_ifname_cb(hostapd_msg_ifname_cb);
 
@@ -1115,6 +1117,7 @@ int main(int argc, char *argv[])
 
 	crypto_unload();
 	os_program_deinit();
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
 
 	return ret;
 }
diff --git a/src/Makefile b/src/Makefile
index d15cf329a..eceffcaf4 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -1,4 +1,4 @@
-SUBDIRS=ap common crypto drivers eapol_auth eapol_supp eap_common eap_peer eap_server l2_packet p2p pae pasn radius rsn_supp tls utils wps
+SUBDIRS=ap common crypto drivers eapol_auth eapol_supp eap_common eap_peer eap_server l2_packet p2p pae pasn radius rsn_supp tls utils wps ft_over_ds_different_l2_domains
 SUBDIRS += fst
 
 all:
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index af0d785be..d7decca25 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -20,6 +20,10 @@
 #include "fst/fst.h"
 #include "vlan.h"
 
+#ifdef CONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS
+#include "ft_over_ds_different_l2_domains/different_l2_domains.h"
+#endif 
+
 enum macaddr_acl {
 	ACCEPT_UNLESS_DENIED = 0,
 	DENY_UNLESS_ACCEPTED = 1,
@@ -417,6 +421,12 @@ struct hostapd_bss_config {
 	int ft_psk_generate_local;
 	int r1_max_key_lifetime;
 	char *rxkh_file;
+#ifdef CONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS
+	struct sockaddr_in ft_peer_list[MAX_FT_PEER_LIST];
+	macaddr ft_peer_list_mac;
+
+#endif /*CONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS*/
+
 #endif /* CONFIG_IEEE80211R_AP */
 
 	char *ctrl_interface; /* directory for UNIX domain sockets */
diff --git a/src/ap/ap_drv_ops.c b/src/ap/ap_drv_ops.c
index b2e930de9..8dab45384 100644
--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -891,6 +891,8 @@ int hostapd_drv_send_mlme(struct hostapd_data *hapd,
 
 	if (!hapd->driver || !hapd->driver->send_mlme || !hapd->drv_priv)
 		return 0;
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] hapd->driver->send_mlme", __func__, __LINE__);
+	
 	return hapd->driver->send_mlme(hapd->drv_priv, msg, len, noack, 0,
 				       csa_offs, csa_offs_len, no_encrypt, 0,
 				       link_id);
diff --git a/src/ap/beacon.c b/src/ap/beacon.c
index c3f61fbbe..d9be8658e 100644
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -1438,6 +1438,7 @@ void handle_probe_req(struct hostapd_data *hapd,
 	int mld_id;
 	u16 links;
 #endif /* CONFIG_IEEE80211BE */
+	wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] ", __func__, __LINE__);
 
 	if (hapd->iconf->rssi_ignore_probe_request && ssi_signal &&
 	    ssi_signal < hapd->iconf->rssi_ignore_probe_request)
@@ -1696,6 +1697,7 @@ void handle_probe_req(struct hostapd_data *hapd,
 	params.is_p2p = !!elems.p2p;
 	params.known_bss = elems.mbssid_known_bss;
 	params.known_bss_len = elems.mbssid_known_bss_len;
+	wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] ", __func__, __LINE__);
 
 	hostapd_gen_probe_resp(hapd, &params);
 
diff --git a/src/ap/drv_callbacks.c b/src/ap/drv_callbacks.c
index f3aeb2236..98769b363 100644
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -1740,7 +1740,9 @@ static void hostapd_action_rx(struct hostapd_data *hapd,
 	}
 #ifdef CONFIG_IEEE80211R_AP
 	if (mgmt->u.action.category == WLAN_ACTION_FT) {
-		wpa_ft_action_rx(sta->wpa_sm, (u8 *) &mgmt->u.action, plen);
+		wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] WLAN_ACTION_FT1, wpa_ft_action_rx1", __func__, __LINE__);
+		
+		wpa_ft_action_rx(sta->wpa_sm, (u8 *) &mgmt->u.action, plen, hapd);
 		return;
 	}
 #endif /* CONFIG_IEEE80211R_AP */
@@ -1926,6 +1928,8 @@ static int hostapd_mgmt_rx(struct hostapd_data *hapd, struct rx_mgmt *rx_mgmt)
 	iface = hapd->iface;
 
 #ifdef CONFIG_TESTING_OPTIONS
+	// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d]", __func__, __LINE__);
+
 	if (hapd->ext_mgmt_frame_handling) {
 		size_t hex_len = 2 * rx_mgmt->frame_len + 1;
 		char *hex = os_malloc(hex_len);
@@ -1936,18 +1940,22 @@ static int hostapd_mgmt_rx(struct hostapd_data *hapd, struct rx_mgmt *rx_mgmt)
 			wpa_msg(hapd->msg_ctx, MSG_INFO, "MGMT-RX %s", hex);
 			os_free(hex);
 		}
+		// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d]", __func__, __LINE__);
 		return 1;
 	}
 #endif /* CONFIG_TESTING_OPTIONS */
 
 	hdr = (const struct ieee80211_hdr *) rx_mgmt->frame;
 	bssid = get_hdr_bssid(hdr, rx_mgmt->frame_len);
+	// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d]", __func__, __LINE__);
 	if (bssid == NULL)
 		return 0;
 
 	hapd = get_hapd_bssid(iface, bssid, rx_mgmt->link_id);
 
 	if (!hapd) {
+		// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] if hapd", __func__, __LINE__);
+		
 		u16 fc = le_to_host16(hdr->frame_control);
 
 		/*
@@ -1968,6 +1976,7 @@ static int hostapd_mgmt_rx(struct hostapd_data *hapd, struct rx_mgmt *rx_mgmt)
 
 	if (hapd == HAPD_BROADCAST) {
 		size_t i;
+		// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] hapd == HAPD_BROADCAST", __func__, __LINE__);
 
 		ret = 0;
 		for (i = 0; i < iface->num_bss; i++) {
@@ -1976,16 +1985,20 @@ static int hostapd_mgmt_rx(struct hostapd_data *hapd, struct rx_mgmt *rx_mgmt)
 			if (rx_mgmt->drv_priv &&
 			    (iface->bss[i]->drv_priv != rx_mgmt->drv_priv))
 				continue;
-
+			// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] call ieee802_11_mgmt", __func__, __LINE__);
+			
 			if (ieee802_11_mgmt(iface->bss[i], rx_mgmt->frame,
 					    rx_mgmt->frame_len, &fi) > 0)
 				ret = 1;
 		}
-	} else
+	} else {
+		// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] call ieee802_11_mgmt", __func__, __LINE__);
+		
 		ret = ieee802_11_mgmt(hapd, rx_mgmt->frame, rx_mgmt->frame_len,
 				      &fi);
-
+	}
 	random_add_randomness(&fi, sizeof(fi));
+	// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d]", __func__, __LINE__);
 
 	return ret;
 }
@@ -2617,11 +2630,20 @@ void wpa_supplicant_event(void *ctx, enum wpa_event_type event,
 		break;
 #endif /* NEED_AP_MLME */
 	case EVENT_RX_MGMT:
-		if (!data->rx_mgmt.frame)
+		// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] EVENT_RX_MGMT1", __func__, __LINE__);
+
+		if (!data->rx_mgmt.frame) {
+			wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] !data->rx_mgmt.frame", __func__, __LINE__);
+			
 			break;
+		}
 #ifdef NEED_AP_MLME
+		// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] call hostapd_mgmt_rx", __func__, __LINE__);
+
 		hostapd_mgmt_rx(hapd, &data->rx_mgmt);
 #else /* NEED_AP_MLME */
+		wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] call hostapd_action_rx1", __func__, __LINE__);
+		
 		hostapd_action_rx(hapd, &data->rx_mgmt);
 #endif /* NEED_AP_MLME */
 		break;
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index e5939a1f1..53c0dad80 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -6365,9 +6365,10 @@ static int handle_action(struct hostapd_data *hapd,
 	switch (mgmt->u.action.category) {
 #ifdef CONFIG_IEEE80211R_AP
 	case WLAN_ACTION_FT:
+		wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] WLAN_ACTION_FT1, wpa_ft_action_rx1", __func__, __LINE__);
 		if (!sta ||
 		    wpa_ft_action_rx(sta->wpa_sm, (u8 *) &mgmt->u.action,
-				     len - IEEE80211_HDRLEN))
+				     len - IEEE80211_HDRLEN, hapd))
 			break;
 		return 1;
 #endif /* CONFIG_IEEE80211R_AP */
@@ -6570,7 +6571,7 @@ int ieee802_11_mgmt(struct hostapd_data *hapd, const u8 *buf, size_t len,
 	static const u8 p2p_network_id[ETH_ALEN] =
 		{ 0x51, 0x6f, 0x9a, 0x02, 0x00, 0x00 };
 #endif /* CONFIG_NAN_USD */
-
+	
 	if (len < 24)
 		return 0;
 
@@ -6582,7 +6583,13 @@ int ieee802_11_mgmt(struct hostapd_data *hapd, const u8 *buf, size_t len,
 	mgmt = (struct ieee80211_mgmt *) buf;
 	fc = le_to_host16(mgmt->frame_control);
 	stype = WLAN_FC_GET_STYPE(fc);
+	// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] len = %d, stype=%d, mgmt=%p", __func__, __LINE__, len, stype, mgmt);
+
+	// if(mgmt->sa[0] == 0xc && mgmt->sa[0] == 0x4) {
+	// wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] return 0", __func__, __LINE__);
 
+	// 	return 0;
+	// }
 	if (is_multicast_ether_addr(mgmt->sa) ||
 	    is_zero_ether_addr(mgmt->sa) ||
 	    ether_addr_equal(mgmt->sa, hapd->own_addr)) {
@@ -6622,7 +6629,8 @@ int ieee802_11_mgmt(struct hostapd_data *hapd, const u8 *buf, size_t len,
 			   MAC2STR(mgmt->bssid));
 		return 0;
 	}
-
+	// wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
+	
 	if (hapd->iface->state != HAPD_IFACE_ENABLED) {
 		wpa_printf(MSG_DEBUG, "MGMT: Ignore management frame while interface is not enabled (SA=" MACSTR " DA=" MACSTR " subtype=%u)",
 			   MAC2STR(mgmt->sa), MAC2STR(mgmt->da), stype);
diff --git a/src/ap/wpa_auth.h b/src/ap/wpa_auth.h
index c412633cd..ea6b8f478 100644
--- a/src/ap/wpa_auth.h
+++ b/src/ap/wpa_auth.h
@@ -562,8 +562,8 @@ void wpa_ft_process_auth(struct wpa_state_machine *sm,
 			 void *ctx);
 int wpa_ft_validate_reassoc(struct wpa_state_machine *sm, const u8 *ies,
 			    size_t ies_len);
-int wpa_ft_action_rx(struct wpa_state_machine *sm, const u8 *data, size_t len);
-int wpa_ft_rrb_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
+int wpa_ft_action_rx(struct wpa_state_machine *sm, const u8 *data, size_t len, struct hostapd_data *hapd);
+int wpa_ft_rrb_rx(struct hostapd_data *hapd, const u8 *src_addr,
 		  const u8 *data, size_t data_len);
 void wpa_ft_rrb_oui_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 		       const u8 *dst_addr, u8 oui_suffix, const u8 *data,
diff --git a/src/ap/wpa_auth_ft.c b/src/ap/wpa_auth_ft.c
index d5400a9f7..f89ca6113 100644
--- a/src/ap/wpa_auth_ft.c
+++ b/src/ap/wpa_auth_ft.c
@@ -29,6 +29,7 @@
 #include "wpa_auth_i.h"
 #include "pmksa_cache_auth.h"
 
+#include "hostapd.h"
 
 #ifdef CONFIG_IEEE80211R_AP
 
@@ -42,7 +43,8 @@ static const int dot11RSNAConfigPMKLifetime = 43200;
 static int wpa_ft_send_rrb_auth_resp(struct wpa_state_machine *sm,
 				     const u8 *current_ap, const u8 *sta_addr,
 				     u16 status, const u8 *resp_ies,
-				     size_t resp_ies_len);
+				     size_t resp_ies_len,
+					 struct hostapd_data *hapd);
 static void ft_finish_pull(struct wpa_state_machine *sm);
 static void wpa_ft_expire_pull(void *eloop_ctx, void *timeout_ctx);
 static void wpa_ft_rrb_seq_timeout(void *eloop_ctx, void *timeout_ctx);
@@ -629,8 +631,42 @@ out:
 	RRB_GET_OPTIONAL_SRC(auth, type, field, txt, checklength)
 
 static int wpa_ft_rrb_send(struct wpa_authenticator *wpa_auth, const u8 *dst,
-			   const u8 *data, size_t data_len)
+			   const u8 *data, size_t data_len, struct hostapd_data *hapd)
 {
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] data_len=%d, "MACSTR" "MACSTR,
+		__func__, __LINE__, data_len, MAC2STR(dst), MAC2STR(hapd->conf->ft_peer_list_mac));
+#ifdef CONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS
+	if(os_memcmp(dst, hapd->conf->ft_peer_list_mac, ETH_ALEN) == 0) {
+		struct sockaddr_in dest_addr;
+		int fd, ret;
+		wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
+		
+		fd = socket(AF_INET, SOCK_RAW, TEST_PROTO);
+		if(fd < 0) {
+			wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] Error create sock", __func__, __LINE__);
+			return -1;
+		}
+		wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] s_addr = %d", __func__, __LINE__,  hapd->conf->ft_peer_list[0].sin_addr.s_addr);
+
+		dest_addr.sin_family = AF_INET;
+    	dest_addr.sin_port = htons(0);
+    	dest_addr.sin_addr.s_addr = hapd->conf->ft_peer_list[0].sin_addr.s_addr;
+		wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
+
+		if ((ret = sendto(fd, data, data_len, 0,
+                   (struct sockaddr*)&dest_addr, sizeof(dest_addr))) < 0) {
+			wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] Error sendto", __func__, __LINE__);
+			// return -1;
+		}
+		close(fd);
+		wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
+
+		// return ret;
+	}
+
+#endif
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
+
 	if (wpa_auth->cb->send_ether == NULL)
 		return -1;
 	wpa_printf(MSG_DEBUG, "FT: RRB send to " MACSTR, MAC2STR(dst));
@@ -3440,6 +3476,7 @@ void wpa_ft_process_auth(struct wpa_state_machine *sm,
 	u8 *resp_ies;
 	size_t resp_ies_len;
 	int res;
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
 
 	if (sm == NULL) {
 		wpa_printf(MSG_DEBUG, "FT: Received authentication frame, but "
@@ -3721,7 +3758,7 @@ out:
 }
 
 
-int wpa_ft_action_rx(struct wpa_state_machine *sm, const u8 *data, size_t len)
+int wpa_ft_action_rx(struct wpa_state_machine *sm, const u8 *data, size_t len, struct hostapd_data *hapd)
 {
 	const u8 *sta_addr, *target_ap;
 	const u8 *ies;
@@ -3790,30 +3827,39 @@ int wpa_ft_action_rx(struct wpa_state_machine *sm, const u8 *data, size_t len)
 	os_memcpy(frame + 1, data, len);
 
 	wpa_ft_rrb_send(sm->wpa_auth, target_ap, (u8 *) frame,
-			sizeof(*frame) + len);
+			sizeof(*frame) + len, hapd);
 	os_free(frame);
 
 	return 0;
 }
 
+struct argv_ft_rrb_cb{
+	struct hostapd_data *hapd;
+	struct wpa_state_machine *sm;
+};
 
 static void wpa_ft_rrb_rx_request_cb(void *ctx, const u8 *dst,
 				     u16 auth_transaction, u16 resp,
 				     const u8 *ies, size_t ies_len)
 {
-	struct wpa_state_machine *sm = ctx;
+	// struct wpa_state_machine *sm = ctx;
+	struct argv_ft_rrb_cb *argv_ft = ctx;
+	struct hostapd_data *hapd = argv_ft->hapd;
+	struct wpa_state_machine *sm = argv_ft->sm;
 	wpa_printf(MSG_DEBUG, "FT: Over-the-DS RX request cb for " MACSTR,
 		   MAC2STR(sm->addr));
 	wpa_ft_send_rrb_auth_resp(sm, sm->ft_pending_current_ap, sm->addr,
-				  WLAN_STATUS_SUCCESS, ies, ies_len);
+				  WLAN_STATUS_SUCCESS, ies, ies_len, hapd);
 }
 
 
-static int wpa_ft_rrb_rx_request(struct wpa_authenticator *wpa_auth,
+static int wpa_ft_rrb_rx_request(struct hostapd_data *hapd,
 				 const u8 *current_ap, const u8 *sta_addr,
 				 const u8 *body, size_t len)
 {
+	struct wpa_authenticator *wpa_auth = hapd->wpa_auth;
 	struct wpa_state_machine *sm;
+	struct argv_ft_rrb_cb argv_ft = {hapd, sm};
 	u16 status;
 	u8 *resp_ies;
 	size_t resp_ies_len;
@@ -3829,7 +3875,7 @@ static int wpa_ft_rrb_rx_request(struct wpa_authenticator *wpa_auth,
 	wpa_hexdump(MSG_MSGDUMP, "FT: RRB Request Frame body", body, len);
 
 	sm->ft_pending_cb = wpa_ft_rrb_rx_request_cb;
-	sm->ft_pending_cb_ctx = sm;
+	sm->ft_pending_cb_ctx = &argv_ft;
 	os_memcpy(sm->ft_pending_current_ap, current_ap, ETH_ALEN);
 	sm->ft_pending_pull_left_retries = sm->wpa_auth->conf.rkh_pull_retries;
 	res = wpa_ft_process_auth_req(sm, body, len, &resp_ies,
@@ -3839,9 +3885,10 @@ static int wpa_ft_rrb_rx_request(struct wpa_authenticator *wpa_auth,
 		return 0;
 	}
 	status = res;
-
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] call wpa_ft_send_rrb_auth_resp1", __func__, __LINE__);
+	
 	res = wpa_ft_send_rrb_auth_resp(sm, current_ap, sta_addr, status,
-					resp_ies, resp_ies_len);
+					resp_ies, resp_ies_len, hapd);
 	os_free(resp_ies);
 	return res;
 }
@@ -3850,7 +3897,8 @@ static int wpa_ft_rrb_rx_request(struct wpa_authenticator *wpa_auth,
 static int wpa_ft_send_rrb_auth_resp(struct wpa_state_machine *sm,
 				     const u8 *current_ap, const u8 *sta_addr,
 				     u16 status, const u8 *resp_ies,
-				     size_t resp_ies_len)
+				     size_t resp_ies_len,
+					 struct hostapd_data *hapd)
 {
 	struct wpa_authenticator *wpa_auth = sm->wpa_auth;
 	size_t rlen;
@@ -3889,9 +3937,10 @@ static int wpa_ft_send_rrb_auth_resp(struct wpa_state_machine *sm,
 	pos += 2;
 	if (resp_ies)
 		os_memcpy(pos, resp_ies, resp_ies_len);
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
 
 	wpa_ft_rrb_send(wpa_auth, current_ap, (u8 *) frame,
-			sizeof(*frame) + rlen);
+			sizeof(*frame) + rlen, hapd);
 	os_free(frame);
 
 	return 0;
@@ -4717,7 +4766,7 @@ out:
 }
 
 
-int wpa_ft_rrb_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
+int wpa_ft_rrb_rx(struct hostapd_data *hapd, const u8 *src_addr,
 		  const u8 *data, size_t data_len)
 {
 	struct ft_rrb_frame *frame;
@@ -4725,6 +4774,8 @@ int wpa_ft_rrb_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 	const u8 *pos, *end, *start;
 	u8 action;
 	const u8 *sta_addr, *target_ap_addr;
+	struct wpa_authenticator *wpa_auth = hapd->wpa_auth;
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
 
 	wpa_printf(MSG_DEBUG, "FT: RRB received frame from remote AP " MACSTR,
 		   MAC2STR(src_addr));
@@ -4801,7 +4852,7 @@ int wpa_ft_rrb_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 			return -1;
 		}
 
-		if (wpa_ft_rrb_rx_request(wpa_auth, frame->ap_address,
+		if (wpa_ft_rrb_rx_request(hapd, frame->ap_address,
 					  sta_addr, pos, end - pos) < 0)
 			return -1;
 	} else if (frame->packet_type == FT_PACKET_RESPONSE) {
@@ -4836,6 +4887,7 @@ void wpa_ft_rrb_oui_rx(struct wpa_authenticator *wpa_auth, const u8 *src_addr,
 	const u8 *auth, *enc;
 	size_t alen, elen;
 	int no_defer = 0;
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
 
 	wpa_printf(MSG_DEBUG, "FT: RRB-OUI(" MACSTR
 		   ") received frame from remote AP "
diff --git a/src/ap/wpa_auth_glue.c b/src/ap/wpa_auth_glue.c
index d30e9ef3b..7af14d9cc 100644
--- a/src/ap/wpa_auth_glue.c
+++ b/src/ap/wpa_auth_glue.c
@@ -33,7 +33,9 @@
 #include "pmksa_cache_auth.h"
 #include "wpa_auth.h"
 #include "wpa_auth_glue.h"
-
+#ifdef CONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS
+#include "ft_over_ds_different_l2_domains/different_l2_domains.h"
+#endif
 
 static void hostapd_wpa_auth_conf(struct hostapd_iface *iface,
 				  struct hostapd_bss_config *conf,
@@ -691,7 +693,7 @@ static void hostapd_wpa_ft_rrb_rx_later(void *eloop_ctx, void *timeout_ctx)
 	dl_list_for_each_safe(data, n, &hapd->l2_queue,
 			      struct wpa_ft_rrb_rx_later_data, list) {
 		if (hapd->wpa_auth) {
-			wpa_ft_rrb_rx(hapd->wpa_auth, data->addr,
+			wpa_ft_rrb_rx(hapd, data->addr,
 				      (const u8 *) (data + 1),
 				      data->data_len);
 		}
@@ -1094,7 +1096,7 @@ static int hostapd_get_sta_tx_params(void *ctx, const u8 *addr,
 #endif /* CONFIG_OCV */
 
 
-#ifdef CONFIG_IEEE80211R_AP
+#if defined(CONFIG_IEEE80211R_AP)
 
 static int hostapd_wpa_auth_send_ft_action(void *ctx, const u8 *dst,
 					   const u8 *data, size_t data_len)
@@ -1104,6 +1106,7 @@ static int hostapd_wpa_auth_send_ft_action(void *ctx, const u8 *dst,
 	struct ieee80211_mgmt *m;
 	size_t mlen;
 	struct sta_info *sta;
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
 
 	sta = ap_get_sta(hapd, dst);
 	if (sta == NULL || sta->wpa_sm == NULL)
@@ -1119,6 +1122,7 @@ static int hostapd_wpa_auth_send_ft_action(void *ctx, const u8 *dst,
 	os_memcpy(m->sa, hapd->own_addr, ETH_ALEN);
 	os_memcpy(m->bssid, hapd->own_addr, ETH_ALEN);
 	os_memcpy(&m->u, data, data_len);
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] call hostapd_drv_send_mlme1", __func__, __LINE__);
 
 	res = hostapd_drv_send_mlme(hapd, (u8 *) m, mlen, 0, NULL, 0, 0);
 	os_free(m);
@@ -1454,15 +1458,34 @@ static void hostapd_rrb_receive(void *ctx, const u8 *src_addr, const u8 *buf,
 {
 	struct hostapd_data *hapd = ctx;
 	struct l2_ethhdr *ethhdr;
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
+
 	if (len < sizeof(*ethhdr))
 		return;
 	ethhdr = (struct l2_ethhdr *) buf;
-	wpa_printf(MSG_DEBUG, "FT: RRB received packet " MACSTR " -> "
-		   MACSTR, MAC2STR(ethhdr->h_source), MAC2STR(ethhdr->h_dest));
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] FT: RRB received packet " MACSTR " -> "
+		   MACSTR, __func__, __LINE__, MAC2STR(ethhdr->h_source), MAC2STR(ethhdr->h_dest));
 	if (!is_multicast_ether_addr(ethhdr->h_dest) &&
 	    !ether_addr_equal(hapd->own_addr, ethhdr->h_dest))
 		return;
-	wpa_ft_rrb_rx(hapd->wpa_auth, ethhdr->h_source, buf + sizeof(*ethhdr),
+#ifdef CONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS
+	if(ethhdr->h_proto == ETH_P_IP) {
+		char ip_str[INET_ADDRSTRLEN+1] = "";
+		struct iphdr *ip_header = buf + sizeof(*ethhdr);
+		inet_ntop(AF_INET, &ip_header->saddr, ip_str, INET_ADDRSTRLEN);
+		wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] src ip: %s, s_addr: %u, dd: %u",
+			__func__, __LINE__, ip_str, ip_header->saddr, hapd->conf->ft_peer_list[0].sin_addr.s_addr);
+
+		if(ip_header->protocol == TEST_PROTO && ip_header->saddr == hapd->conf->ft_peer_list[0].sin_addr.s_addr) {
+			
+			wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] RRB L3", __func__, __LINE__);
+			wpa_ft_rrb_rx(hapd, ethhdr->h_source, buf + sizeof(*ethhdr) + sizeof(*ip_header),
+		      len - sizeof(*ethhdr));
+		}
+
+	} else
+#endif
+	wpa_ft_rrb_rx(hapd, ethhdr->h_source, buf + sizeof(*ethhdr),
 		      len - sizeof(*ethhdr));
 }
 
@@ -1832,6 +1855,17 @@ int hostapd_setup_wpa(struct hostapd_data *hapd)
 				   "interface");
 			return -1;
 		}
+#ifdef CONFIG_IEEE80211R_AP_L2_DIFFERENT_DOMAINS
+
+		hapd->l2 = l2_packet_init(ft_iface, NULL, ETH_P_IP,
+					  hostapd_rrb_receive, hapd, 1);
+		if (!hapd->l2) {
+			wpa_printf(MSG_ERROR, "Failed to open l2_packet "
+				   "interface");
+			return -1;
+		}
+
+#endif
 
 		if (hostapd_wpa_register_ft_oui(hapd, ft_iface)) {
 			wpa_printf(MSG_ERROR,
diff --git a/src/common/ieee802_11_common.c b/src/common/ieee802_11_common.c
index 838869a03..36ae58e5c 100644
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -213,7 +213,8 @@ static int ieee802_11_parse_vendor_specific(const u8 *pos, size_t elen,
 		break;
 
 	default:
-		wpa_printf(MSG_EXCESSIVE, "unknown vendor specific "
+		
+		wpa_printf(MSG_EXCESSIVE, "[?]unknown vendor specific "
 			   "information element ignored (vendor OUI "
 			   "%02x:%02x:%02x len=%lu)",
 			   pos[0], pos[1], pos[2], (unsigned long) elen);
diff --git a/src/drivers/driver_hostap.c b/src/drivers/driver_hostap.c
index 74c7767ba..620b4d09c 100644
--- a/src/drivers/driver_hostap.c
+++ b/src/drivers/driver_hostap.c
@@ -181,6 +181,8 @@ static void handle_frame(struct hostap_driver_data *drv, u8 *buf, size_t len)
 		os_memset(&event, 0, sizeof(event));
 		event.rx_mgmt.frame = buf;
 		event.rx_mgmt.frame_len = data_len;
+		wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] wpa_supplicant_event EVENT_RX_MGMT1", __func__, __LINE__);
+
 		wpa_supplicant_event(drv->hapd, EVENT_RX_MGMT, &event);
 		break;
 	case WLAN_FC_TYPE_CTRL:
@@ -269,6 +271,7 @@ static int hostap_send_mlme(void *priv, const u8 *msg, size_t len, int noack,
 	struct hostap_driver_data *drv = priv;
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *) msg;
 	int res;
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] send", __func__, __LINE__);
 
 	/* Request TX callback */
 	hdr->frame_control |= host_to_le16(BIT(1));
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index 2f8ed7428..795dd668c 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -881,6 +881,7 @@ static void nl80211_recv_beacons(int sock, void *eloop_ctx, void *handle)
 	wpa_printf(MSG_EXCESSIVE, "nl80211: Beacon event message available");
 
 	res = nl_recvmsgs(handle, w->nl_cb);
+	// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] res = %d", __func__, __LINE__, res);
 	if (res < 0) {
 		wpa_printf(MSG_INFO, "nl80211: %s->nl_recvmsgs failed: %d",
 			   __func__, res);
@@ -898,7 +899,7 @@ static int process_beacon_event(struct nl_msg *msg, void *arg)
 
 	nla_parse(tb, NL80211_ATTR_MAX, genlmsg_attrdata(gnlh, 0),
 		  genlmsg_attrlen(gnlh, 0), NULL);
-
+	// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] gnlh->cmd = %d", __func__, __LINE__, gnlh->cmd);
 	if (gnlh->cmd != NL80211_CMD_FRAME) {
 		wpa_printf(MSG_DEBUG, "nl80211: Unexpected beacon event? (%d)",
 			   gnlh->cmd);
@@ -913,6 +914,7 @@ static int process_beacon_event(struct nl_msg *msg, void *arg)
 		os_memset(&event, 0, sizeof(event));
 		event.rx_mgmt.frame = nla_data(tb[NL80211_ATTR_FRAME]);
 		event.rx_mgmt.frame_len = nla_len(tb[NL80211_ATTR_FRAME]);
+		// wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] wpa_supplicant_event EVENT_RX_MGMT1", __func__, __LINE__);
 		wpa_supplicant_event(drv->ctx, EVENT_RX_MGMT, &event);
 	}
 
@@ -938,7 +940,7 @@ nl80211_get_wiphy_data_ap(struct i802_bss *bss)
 		if (w->wiphy_idx == wiphy_idx)
 			goto add;
 	}
-
+	wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d]", __func__, __LINE__);
 	/* alloc new one */
 	w = os_zalloc(sizeof(*w));
 	if (w == NULL)
@@ -4389,6 +4391,7 @@ static int wpa_driver_nl80211_send_mlme(struct i802_bss *bss, const u8 *data,
 	int use_cookie = 1;
 	int res;
 	struct i802_link *link = nl80211_get_link(bss, link_id);
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG]", __func__, __LINE__);
 
 	mgmt = (struct ieee80211_mgmt *) data;
 	fc = le_to_host16(mgmt->frame_control);
@@ -11098,6 +11101,8 @@ static int driver_nl80211_send_mlme(void *priv, const u8 *data,
 				    int link_id)
 {
 	struct i802_bss *bss = priv;
+	wpa_printf(MSG_DEBUG, "[%s:%d][DEBUG] wpa_driver_nl80211_send_mlme", __func__, __LINE__);
+
 	return wpa_driver_nl80211_send_mlme(bss, data, data_len, noack,
 					    freq, 0, 0, wait, csa_offs,
 					    csa_offs_len, no_encrypt, link_id);
diff --git a/src/drivers/driver_nl80211_event.c b/src/drivers/driver_nl80211_event.c
index e7b67371a..42b978872 100644
--- a/src/drivers/driver_nl80211_event.c
+++ b/src/drivers/driver_nl80211_event.c
@@ -1405,6 +1405,7 @@ static void mlme_event_mgmt(struct i802_bss *bss,
 	event.rx_mgmt.drv_priv = bss;
 	event.rx_mgmt.ctx = bss->ctx;
 	event.rx_mgmt.link_id = link_id;
+	wpa_printf(MSG_DEBUG, "[DEBUG][%s:%d] wpa_supplicant_event EVENT_RX_MGMT1", __func__, __LINE__);
 
 	wpa_supplicant_event(drv->ctx, EVENT_RX_MGMT, &event);
 }
diff --git a/src/ft_over_ds_different_l2_domains/different_l2_domains.c b/src/ft_over_ds_different_l2_domains/different_l2_domains.c
new file mode 100644
index 000000000..d40e1153d
--- /dev/null
+++ b/src/ft_over_ds_different_l2_domains/different_l2_domains.c
@@ -0,0 +1,34 @@
+ 
+#include "stdio.h"
+#include "stdlib.h"
+
+#include "different_l2_domains.h"
+
+#define DEBUG_FILE_CON "/home/andrey/debug_hostapd.txt"
+
+struct debug_con {
+    int con1, con2, con3, con4, con5, con6;
+};
+
+struct debug_con my_con = {0, 0, 0, 0, 0, 0};
+
+int read_debug_con() {
+    FILE *file = fopen(DEBUG_FILE_CON, "r");
+    if(file) {
+        fscanf(file, "%d %d %d %d %d %d",
+            &my_con.con1, &my_con.con2, &my_con.con3,
+            &my_con.con4, &my_con.con5, &my_con.con6);
+
+        fclose(file);
+    }
+    return 0;
+}
+
+ 
+
+
+
+
+
+
+
diff --git a/src/ft_over_ds_different_l2_domains/different_l2_domains.h b/src/ft_over_ds_different_l2_domains/different_l2_domains.h
new file mode 100644
index 000000000..2e0115f07
--- /dev/null
+++ b/src/ft_over_ds_different_l2_domains/different_l2_domains.h
@@ -0,0 +1,18 @@
+#ifndef INCKUDES_DIFFRENT_L2_DOMAINS_H
+#define INCKUDES_DIFFRENT_L2_DOMAINS_H
+
+#include <netinet/ip.h>
+
+#define MAX_FT_PEER_LIST 1
+
+
+
+
+
+
+
+
+
+#endif
+
+
diff --git a/src/utils/common.h b/src/utils/common.h
index d7b3600f2..24ea3da17 100644
--- a/src/utils/common.h
+++ b/src/utils/common.h
@@ -339,7 +339,7 @@ static inline void WPA_PUT_LE64(u8 *a, u64 val)
 	a[0] = val & 0xff;
 }
 
-
+#define TEST_PROTO 254
 #ifndef ETH_ALEN
 #define ETH_ALEN 6
 #endif
diff --git a/src/utils/wpa_debug.c b/src/utils/wpa_debug.c
index 7f3dd185f..1041bf44d 100644
--- a/src/utils/wpa_debug.c
+++ b/src/utils/wpa_debug.c
@@ -210,7 +210,23 @@ void wpa_printf(int level, const char *fmt, ...)
 {
 	va_list ap;
 
-	if (level >= wpa_debug_level) {
+#if 0
+	if(!last_path) {
+	        return;
+	}
+	va_start(ap, fmt);
+	FILE *file = fopen(last_path, "a");
+	if(file){
+	        vfprintf(file, fmt, ap);
+	        fprintf(file, "\n");
+	        fclose(file);
+	}
+	va_end(ap);
+
+#endif
+
+#if 1
+	if (level >= wpa_debug_level || 1) {
 #ifdef CONFIG_ANDROID_LOG
 		va_start(ap, fmt);
 		__android_log_vprint(wpa_to_android_level(level),
@@ -252,6 +268,7 @@ void wpa_printf(int level, const char *fmt, ...)
 		va_end(ap);
 	}
 #endif /* CONFIG_DEBUG_LINUX_TRACING */
+#endif
 }
 
 
@@ -520,7 +537,7 @@ void wpa_hexdump_ascii_key(int level, const char *title, const void *buf,
 	_wpa_hexdump_ascii(level, title, buf, len, wpa_debug_show_keys);
 }
 
-
+//?
 #ifdef CONFIG_DEBUG_FILE
 static char *last_path = NULL;
 #endif /* CONFIG_DEBUG_FILE */
diff --git a/wpa_supplicant/events.c b/wpa_supplicant/events.c
index fe8e45e07..d1a097255 100644
--- a/wpa_supplicant/events.c
+++ b/wpa_supplicant/events.c
@@ -6358,6 +6358,8 @@ void wpa_supplicant_event(void *ctx, enum wpa_event_type event,
 #endif /* CONFIG_WNM */
 #ifdef CONFIG_IEEE80211R
 	case EVENT_FT_RESPONSE:
+		wpa_printf(MSG_DEBUG, "[DEBUG][events:%s:%d] EVENT_FT_RESPONSE1", __func__, __LINE__);
+
 		wpa_supplicant_event_ft_response(wpa_s, data);
 		break;
 #endif /* CONFIG_IEEE80211R */
@@ -6623,6 +6625,7 @@ void wpa_supplicant_event(void *ctx, enum wpa_event_type event,
 	case EVENT_RX_MGMT: {
 		u16 fc, stype;
 		const struct ieee80211_mgmt *mgmt;
+		wpa_printf(MSG_DEBUG, "[DEBUG][events:%s:%d] EVENT_RX_MGMT1", __func__, __LINE__);
 
 #ifdef CONFIG_TESTING_OPTIONS
 		if (wpa_s->ext_mgmt_frame_handling) {
-- 
2.34.1

